"use client";

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Header from "@/app/component/Header";
import SplashScreen from "@/app/component/SplashScreen";
import { usePathname } from "next/navigation";
import { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = usePathname();
  const isHome = pathname === "/";
  const [isLoading, setIsLoading] = useState(true);

  // Fungsi untuk menangani penyelesaian loading
  const handleFinishLoading = () => {
    // Simulasi proses loading data dengan delay tambahan
    setTimeout(() => {
      setIsLoading(false);
    }, 1500); // Tambahkan delay 1.5 detik setelah animasi splash screen selesai
  };

  useEffect(() => {
    if (isLoading) return;
  }, [isLoading]);

  return (
    <html lang="en" className={`${geistSans.variable} ${geistMono.variable}`}>
      <body>
        {isLoading && isHome ? (
          <SplashScreen finishLoading={handleFinishLoading} />
        ) : (
          <div className="relative min-h-screen">
            <div className="fixed top-0 left-0 right-0 z-50">
              <Header />
            </div>
            <div className="h-full">{children}</div>
          </div>
        )}
      </body>
    </html>
  );
}
